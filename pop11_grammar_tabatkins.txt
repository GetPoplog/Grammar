// Grammar
Diagram(
	Comment('Grammar'),
	NonTerminal('expression')
)

// Expression
Diagram(
	Comment('Expression'),
	Choice(0,
		NonTerminal('literal'),
		NonTerminal('constant expression'),
		NonTerminal('variable'),
		NonTerminal('assignment'),
		NonTerminal('definition'),
		NonTerminal('declaration'),
		NonTerminal('conditional'),
		NonTerminal('boolean expression'),
		NonTerminal('iterative'),
		NonTerminal('operator expression'),
		NonTerminal('function application'),
		NonTerminal('jump'),
		NonTerminal('label'),
		NonTerminal('loop exits'),
		Sequence(
			Terminal('('),
			NonTerminal('sequence'),
			Terminal(')')
		),
		NonTerminal('block')
	)
)

// Constant expression
Diagram(
	Comment('Constant expression'),
	Choice(0,
		NonTerminal('construct'),
		Sequence(
			Terminal('"'),
			NonTerminal('word'),
			Terminal('"')
		),
		Sequence(
			Terminal('"'),
			NonTerminal('string'),
			Terminal('"')
		)
	)
)

// Definition
Diagram(
	Comment('Definition'),
	Terminal('define'),
	NonTerminal('word'),
	Choice(0,
		Skip(),			
		Sequence(
			Terminal('('),
			Optional(
				NonTerminal('varslist')
			),
			Terminal(')')
		),
		NonTerminal('varslist'),
	),
	ZeroOrMore(
		Sequence(
			Terminal('->'),
			NonTerminal('varslist')
		),
		undefined,
		'skip'
	),
	Terminal(';'),
	NonTerminal('sequence'),
	Terminal('enddefine')
)

// Assignment
Diagram(
	Comment('Assignment'),
	Choice(0,
		Sequence(
			NonTerminal('expression'),
			Choice(0,
				Terminal('->'),
				Terminal('->>')
			),
			Choice(0,
				NonTerminal('variable'),
				NonTerminal('function application')
			)
		),
		Sequence(
			NonTerminal('expression'),
			Terminal('-->'),
			NonTerminal('expression')
		)
	)
)

// Variable
Diagram(
	Comment('Variable'),
	Choice(0,
		NonTerminal('word'),
		Sequence(
			Terminal('nonop'),
			NonTerminal('operation')
		),
		Sequence(
			Terminal('nonmac'),
			NonTerminal('macro')
		),
		Sequence(
			Terminal('nonsyntax'),
			NonTerminal('syntax word')
		)
	)
)

// Declaration
Diagram(
	Comment('Declaration'),
	Choice(0,
		Sequence(
			Optional(
				Terminal('global'),
				'skip'
			),
			Choice(0,
				Terminal('vars'),
				Terminal('constant')
			),
			NonTerminal('varslist'),
			Terminal(';')
		),
		Sequence(
			Terminal('lvars'),
			OneOrMore(
				Choice(0,
					Terminal(','),
					NonTerminal('word')
				)
			),
			Terminal(';')
		),
		Sequence(
			Terminal('dlocal'),
			OneOrMore(
				Choice(0,
					Terminal(','),
					NonTerminal('word')
				)
			),
			Terminal(';')
		)
	)	
)

// Varslist
Diagram(
	Comment('Varslist'),
	OneOrMore(
		Sequence(
			ZeroOrMore(
				Terminal(','),
				undefined,
				'skip'
			),
			Choice(0,
				Skip(),
				Terminal('procedure'),
				Terminal('macro'),
				Terminal('syntax'),
				NonTerminal('number')
			),
			NonTerminal('word')
		)
	)
)

// Sequence
Diagram(
	Comment('Sequence'),
	OneOrMore(
		NonTerminal('expression'),
		Choice(0,
			Terminal(','),
			Terminal(';'),
			Terminal('=>'),
			Terminal('==>')
		)
	)
)

// Block
Diagram(
	Comment('Block'),
	Terminal('lblock'),
	NonTerminal('sequence'),
	Terminal('endlblock')
)

// Literal
Diagram(
	Comment('Literal'),
	Choice(0,
		NonTerminal('number'),
		NonTerminal('string')
	)
)

// Construct
Diagram(
	Comment('Construct'),
    Choice(0,
		NonTerminal('list construct'),
		NonTerminal('pattern construct'),
		NonTerminal('vector construct')
    )
)

// Vector construct
Diagram(
	Comment('Vector construct'),
	Terminal('{'),
	ZeroOrMore(
		NonTerminal('list segment'),
		undefined,
		'skip'
	),
	Terminal('}')
)

// List construct
Diagram(
	Comment('List construct'),
	Terminal('['),
	ZeroOrMore(
		NonTerminal('list segment'),
		undefined,
		'skip'
	),
	Terminal(']')
)

// Pattern construct
Diagram(
	Comment('Pattern construct'),
	Terminal('['),
	ZeroOrMore(
		NonTerminal('pattern segment'),
		undefined,
		'skip'
	),
	Terminal(']')
)

// List segment
Diagram(
	Comment('List segment'),
	Choice(0,
		Sequence(
			Terminal('%'),
			NonTerminal('sequence'),
			Terminal('%')
		),
		NonTerminal('word'),
		NonTerminal('literal'),
		NonTerminal('construct'),
		Sequence(
			Choice(0,
				Terminal('^'),
				Terminal('^^')
			),
			Choice(0,
				NonTerminal('word'),
				Sequence(
					Terminal('('),
					NonTerminal('sequence'),
					Terminal(')')
				)
			)
		)
	)
)

// Pattern segment
Diagram(
	Comment('Pattern segment'),
	Choice(0,
		NonTerminal('list segment'),
		Sequence(
			Choice(0,
				Terminal('?'),
				Terminal('??')
			),
			NonTerminal('word'),
			Optional(
				Sequence(
					Terminal(':'),
					Choice(0,
						NonTerminal('integer'),
						NonTerminal('word'),
						NonTerminal('list segment')
					)
				),
				'skip'
			)
		),
		Terminal('='),
		Terminal('=='),
	)
)

// Label
Diagram(
	Comment('Label'),
	NonTerminal('word'),
	Terminal(':'),
	Optional(
		Terminal('*'),
		'skip'
	)
)

// Jump
Diagram(
	Comment('Jump'),
	Terminal('goto'),
	NonTerminal('word')
)

// Iterative (i)
Diagram(
	Comment('Iterative (i)'),
	Terminal('for'),
	NonTerminal('expression'),
	Terminal('step'),
	NonTerminal('expression'),
	Terminal('till'),
	NonTerminal('expression'),
	Terminal('do'),
	NonTerminal('sequence'),
	Terminal('endfor')
)

// Iterative (ii)
Diagram(
	Comment('Iterative (ii)'),
	Terminal('while'),
	NonTerminal('expression'),
	Terminal('do'),
	NonTerminal('sequence'),
	Terminal('endwhile')
)

// Iterative (iii)
Diagram(
	Comment('Iterative (iii)'),
	Terminal('until'),
	NonTerminal('expression'),
	Terminal('do'),
	NonTerminal('sequence'),
	Terminal('enduntil')
)

// Iterative (iv)
Diagram(
	Comment('Iterative (iv)'),
	Terminal('for'),
	NonTerminal('word'),
	Choice(0,
		Choice(0,
			Terminal('in'),
			Terminal('on')
		),
		Sequence(
			Optional(
				Sequence(
					Terminal('from'),
					NonTerminal('expression'),
					Optional(
						Sequence(
							Terminal('by'),
							NonTerminal('expression')
						),
						'skip'
					)
				),
				'skip'
			),
			Terminal('to')
		)
	),
	NonTerminal('expression'),
	Terminal('do'),
	NonTerminal('sequence'),
	Terminal('endfor')
)

// Iterative (v)
Diagram(
	Comment('Iterative (v)'),
	Terminal('for'),
	NonTerminal('word'),
	Terminal('from_repeater'),
	NonTerminal('expression'),
	Terminal('do'),
	NonTerminal('sequence'),
	Terminal('endfor')
)

// Iterative (vi)
Diagram(
	Comment('Iterative (vi)'),
	Terminal('foreach'),
	NonTerminal('expression'),
	Optional(
		Sequence(
			Terminal('in'),
			NonTerminal('expression')
		)
	),
	Terminal('do'),
	NonTerminal('sequence'),
	Terminal('endforeach')
)

// Iterative (vii)
Diagram(
	Comment('Iterative (vii)'),
	Terminal('forevery'),
	NonTerminal('expression'),
	Optional(
		Sequence(
			Terminal('in'),
			NonTerminal('expression')
		)
	),
	Terminal('do'),
	NonTerminal('sequence'),
	Terminal('endforevery')
)

// Iterative (viii)
Diagram(
	Comment('Iterative (viii)'),
	Terminal('repeat'),
	Choice(0,
		Skip(),
		Sequence(
			NonTerminal('expression'),
			Terminal('times')
		),
		Terminal('forever')
	),
	NonTerminal('sequence'),
	Terminal('endrepeat')
)

// Conditional (i)
Diagram(
	Comment('Conditional (i)'),
	Terminal('if'),
	OneOrMore(
		Sequence(
			NonTerminal('expression'),
			Terminal('then'),
			NonTerminal('sequence')
		),
		Choice(0,
			Terminal('elseif'),
			Terminal('elseunless')
		)
	),
	Optional(
		Sequence(
			Terminal('else'),
			NonTerminal('sequence')
		),
		'skip'
	),
	Terminal('endif')
)

// Conditional (ii)
Diagram(
	Comment('Conditional (ii)'),
	Terminal('unless'),
	OneOrMore(
		Sequence(
			NonTerminal('expression'),
			Terminal('then'),
			NonTerminal('sequence')
		),
		Choice(0,
			Terminal('elseif'),
			Terminal('elseunless')
		)
	),
	Optional(
		Sequence(
			Terminal('else'),
			NonTerminal('sequence')
		),
		'skip'
	),
	Terminal('endunless')
)

// Loop exits
Diagram(
	Comment('Loop exits'),
	Choice(0,
		Choice(0,
			Terminal('quitloop'),
			Terminal('nextloop')
		),
		Sequence(
			Choice(0,
				Terminal('quitif'),
				Terminal('quitunless'),
				Terminal('nextif'),
				Terminal('nextunless')
			),
			Terminal('('),
			NonTerminal('expression'),
			Terminal(')')
		)
	),
	Optional(
		Sequence(
			Terminal('('),
			NonTerminal('integer'),
			Terminal(')')
		),
		'skip'
	)
)

// Boolean expression
Diagram(
	Comment('Boolean expression'),
	OneOrMore(
		NonTerminal('expression'),
		Choice(0,
			Terminal('and'),
			Terminal('or')
		)
	)
)

// Operator expression
Diagram(
	Comment('Operator expression'),
	NonTerminal('expression'),
	NonTerminal('operator'),
	NonTerminal('expression')
)

// Function application
Diagram(
	Comment('Function application'),
	Choice(0,
		Sequence(
			NonTerminal('expression'),
			Terminal('('),
			ZeroOrMore(
				Optional(
					NonTerminal('expression')
				),
				Terminal(','),
				'skip'
			),
			Terminal(')')
		),
		Sequence(
			Terminal('.'),
			NonTerminal('expression')
		)
	)
)
